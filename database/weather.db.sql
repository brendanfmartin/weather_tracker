DO
$body$
BEGIN
   IF NOT EXISTS (
      SELECT *
      FROM   pg_catalog.pg_user
      WHERE  usename = 'postgres') THEN

      CREATE ROLE postgres LOGIN PASSWORD 'postgres';
   END IF;
END
$body$
;

DROP DATABASE weather_tracker;
CREATE DATABASE weather_tracker;

DROP TABLE IF EXISTS weather_reports;
DROP TABLE IF EXISTS locations;

DROP SEQUENCE IF EXISTS weather_report_seq;
CREATE SEQUENCE weather_report_seq start 1;

CREATE TABLE IF NOT EXISTS locations (
  id INTEGER PRIMARY KEY,
  name VARCHAR,
  longitude DOUBLE PRECISION,
  latitude DOUBLE PRECISION
);

COMMENT ON TABLE locations IS 'Contains weather report records (Forecast and Actual).';
COMMENT ON COLUMN locations.id IS 'Autogenerated id.';
COMMENT ON COLUMN locations.name IS 'City name.';
COMMENT ON COLUMN locations.longitude IS 'Longitude.';
COMMENT ON COLUMN locations.latitude IS 'Latitiude.';

CREATE TABLE IF NOT EXISTS weather_reports (
  id INTEGER DEFAULT NEXTVAL('weather_report_seq') PRIMARY KEY,
  location_id INTEGER REFERENCES locations(id) NOT NULL,
  is_forecast BOOLEAN NOT NULL,
  report_date BIGINT NOT NULL,
  sunrise BIGINT NOT NULL,
  sunset BIGINT NOT NULL,
  temperature DOUBLE PRECISION NOT NULL,
  minTemperature DOUBLE PRECISION,
  maxTemperature DOUBLE PRECISION,
  humidity INTEGER NOT NULL,
  pressure DOUBLE PRECISION NOT NULL,
  seaLevel_pressure DOUBLE PRECISION NOT NULL,
  groundLevel_pressure DOUBLE PRECISION NOT NULL,
  wind_speed DOUBLE PRECISION NOT NULL,
  wind_direction INTEGER NOT NULL,
  wind_gusts DOUBLE PRECISION NOT NULL,
  cloudiness INTEGER NOT NULL,
  rain_precipitation_volume DOUBLE PRECISION NOT NULL,
  snow_precipitation_volume DOUBLE PRECISION NOT NULL,
  created_at BIGINT NOT NULL DEFAULT EXTRACT(EPOCH FROM CURRENT_TIMESTAMP),
  CONSTRAINT report_uq UNIQUE(location_id, report_date)
);

COMMENT ON TABLE weather_reports IS 'Contains weather report records (Forecast and Actual).';
COMMENT ON COLUMN weather_reports.id IS 'Autogenerated id.';
COMMENT ON COLUMN weather_reports.location_id IS 'Foreign key on locations table.';
COMMENT ON COLUMN weather_reports.is_forecast IS 'Indicates wheather a forecast or actual weather report.';
COMMENT ON COLUMN weather_reports.report_date IS 'Date/Time weather report is for (Unique value with location_id).';
COMMENT ON COLUMN weather_reports.sunrise IS 'Sunrise for current date.';
COMMENT ON COLUMN weather_reports.sunset IS 'Sunset for current date.';
COMMENT ON COLUMN weather_reports.temperature IS 'Temperature in Kelvin.';
COMMENT ON COLUMN weather_reports.minTemperature IS 'Min temperature for area in Kelvin.';
COMMENT ON COLUMN weather_reports.maxTemperature IS 'Max temperature for area in Kelvin.';
COMMENT ON COLUMN weather_reports.humidity IS 'Percent humidity (1-100).';
COMMENT ON COLUMN weather_reports.pressure IS 'Pressure measured in hPa.';
COMMENT ON COLUMN weather_reports.seaLevel_pressure IS 'Sea level pressure measured in hPa.';
COMMENT ON COLUMN weather_reports.groundLevel_pressure IS 'Ground level pressure measured in hPa';
COMMENT ON COLUMN weather_reports.wind_speed IS 'Wind speed in mps.';
COMMENT ON COLUMN weather_reports.wind_direction IS 'FWind direction in degrees.';
COMMENT ON COLUMN weather_reports.wind_gusts IS 'Wind gusts in mps.';
COMMENT ON COLUMN weather_reports.cloudiness IS 'Percentage cloudiness measured (1-100).';
COMMENT ON COLUMN weather_reports.rain_precipitation_volume IS 'Rain percentage over last 3 hours in mm.';
COMMENT ON COLUMN weather_reports.snow_precipitation_volume IS 'Snow percentage over last 3 hours in mm.';
COMMENT ON COLUMN weather_reports.created_at IS 'Date record created.';

GRANT ALL PRIVILEGES ON SCHEMA public TO postgres;
GRANT ALL PRIVILEGES ON DATABASE weather_tracker TO postgres;
GRANT ALL PRIVILEGES ON TABLE weather_reports TO postgres;
GRANT ALL PRIVILEGES ON TABLE locations TO postgres;